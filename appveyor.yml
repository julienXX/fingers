environment:
  global:
    RUST_VERSION: stable
    CRATE_NAME: fingers

  matrix:
    # MinGW
    - TARGET: i686-pc-windows-gnu
      ARCH: i686
      MPATH: C:\msys64\mingw32
    - TARGET: x86_64-pc-windows-gnu
      ARCH: x86_64
      MPATH: C:\msys64\mingw64

install:
  - ps: >-
      If ($Env:TARGET -eq 'x86_64-pc-windows-gnu') {
        $Env:PATH += ';C:\msys64\mingw64\bin'
      } ElseIf ($Env:TARGET -eq 'i686-pc-windows-gnu') {
        $Env:PATH += ';C:\msys64\mingw32\bin'
      }
  - C:\msys64\usr\bin\pacman -S --noconfirm mingw-w64-%ARCH%-openssl
  - curl -sSf -o rustup-init.exe https://win.rustup.rs/
  - rustup-init.exe -y --default-host %TARGET% --default-toolchain %RUST_VERSION%
  - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
  - set OPENSSL_DIR=%MPATH%\lib
  - rustc -Vv
  - cargo -V

test_script:
  # we don't run the "test phase" when doing deploys
  - if [%APPVEYOR_REPO_TAG%]==[false] (
      cargo build --target %TARGET% &&
      cargo build --target %TARGET% --release &&
      cargo test --target %TARGET% &&
      cargo test --target %TARGET% --release &&
      cargo run --target %TARGET% &&
      cargo run --target %TARGET% --release
    )

before_deploy:
  - cargo rustc --target %TARGET% --release --bin fingers -- -C lto
  - ps: ci\before_deploy.ps1

deploy:
  artifact: /.*\.zip/
  auth_token:
    secure: IMIlNnNBZwe5/NBK9VQfZnOzaZWvdR/Dnhl+aMFtkYD7qntX57VTHS+D/lsPGiV/
  description: ''
  on:
    RUST_VERSION: stable
    appveyor_repo_tag: true
  provider: GitHub

cache:
  - C:\Users\appveyor\.cargo\registry
  - target

branches:
  only:
    # Release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

notifications:
  - provider: Email
    on_build_success: false

# disable automatic builds
build: false

# environment:
#   global:
#     # This will be used as part of the zipfile name
#     PROJECT_NAME: fingers
#     OPENSSL_VERSION: 1_0_2j
#     OPENSSL_INCLUDE_DIR: C:\OpenSSL\include
#     OPENSSL_LIB_DIR: C:\OpenSSL\lib
#     OPENSSL_LIBS: ssleay32MD:libeay32MD
#   matrix:
#   - TARGET: x86_64-pc-windows-msvc
#     ARCH: amd64
#     BITS: 64
#     VS: C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat
#   - TARGET: i686-pc-windows-msvc
#     ARCH: x86
#     BITS: 32
#     VS: C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat
#   - TARGET: x86_64-pc-windows-gnu
#     BITS: 64
#     MSYS_BITS: 64
#   - TARGET: i686-pc-windows-gnu
#     BITS: 32
#     MSYS_BITS: 32
# # Install Rust and Cargo
# # (Based on from https://github.com/rust-lang/libc/blob/master/appveyor.yml)
# install:
#   - ps: Start-FileDownload "http://slproweb.com/download/Win${env:BITS}OpenSSL-${env:OPENSSL_VERSION}.exe"
#   - Win%BITS%OpenSSL-%OPENSSL_VERSION%.exe /SILENT /VERYSILENT /SP- /DIR="C:\OpenSSL"
#   - curl -sSf -o rustup-init.exe https://win.rustup.rs
#   - rustup-init.exe --default-host %TARGET% --default-toolchain stable -y
#   - if defined VS call "%VS%" %ARCH%
#   - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
#   - if defined MSYS_BITS set PATH=%PATH%;C:\msys64\mingw%MSYS_BITS%\bin
#   - rustc -Vv
#   - cargo -V

# # 'cargo test' takes care of building for us, so disable Appveyor's build stage. This prevents
# # the "directory does not contain a project or solution file" error.
# # source: https://github.com/starkat99/appveyor-rust/blob/master/appveyor.yml#L113
# build: false

# # Equivalent to Travis' `script` phase
# # TODO modify this phase as you see fit
# test_script:
#   - cargo build --verbose
#   - cargo run
#   - cargo test

# before_deploy:
#   # Generate artifacts for release
#   - cargo build --release
#   - mkdir staging
#   - copy target\release\fingers.exe staging
#   - cd staging
#     # release zipfile will look like 'rust-everywhere-v1.2.3-x86_64-pc-windows-msvc'
#   - 7z a ../%PROJECT_NAME%-%APPVEYOR_REPO_TAG_NAME%-%TARGET%.zip *
#   - appveyor PushArtifact ../%PROJECT_NAME%-%APPVEYOR_REPO_TAG_NAME%-%TARGET%.zip

# deploy:
#   description: 'Windows release'
#   # All the zipped artifacts will be deployed
#   artifact: /.*\.zip/
#   auth_token:
#     secure: IMIlNnNBZwe5/NBK9VQfZnOzaZWvdR/Dnhl+aMFtkYD7qntX57VTHS+D/lsPGiV/
#   provider: GitHub
#   # deploy when a new tag is pushed and only on the stable channel
#   on:
#     # channel to use to produce the release artifacts
#     CHANNEL: stable
#     appveyor_repo_tag: true

# branches:
#   only:
#     - master
#     # IMPORTANT Regex to match tags. Required, or appveyor may not trigger deploys when a new tag
#     # is pushed. This regex matches semantic versions like v1.2.3-rc4+2016.02.22
#     - /^v\d+\.\d+\.\d+.*$/
